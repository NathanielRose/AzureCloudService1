//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestApp.TrollBridgeService
{
    using System.Runtime.Serialization;
    using System;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "TokenHolder", Namespace = "http://schemas.datacontract.org/2004/07/TrollBridgeService")]
    [System.SerializableAttribute()]
    public partial class TokenHolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestApp.TrollBridgeService.ShareAccessToken[] AzureEventHubsField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestApp.TrollBridgeService.ShareAccessToken[] AzureQueuesField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestApp.TrollBridgeService.ShareAccessToken[] AzureStorageField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EarliestTokenExpiresField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestApp.TrollBridgeService.ShareAccessToken[] AzureEventHubs
        {
            get
            {
                return this.AzureEventHubsField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AzureEventHubsField, value) != true))
                {
                    this.AzureEventHubsField = value;
                    this.RaisePropertyChanged("AzureEventHubs");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestApp.TrollBridgeService.ShareAccessToken[] AzureQueues
        {
            get
            {
                return this.AzureQueuesField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AzureQueuesField, value) != true))
                {
                    this.AzureQueuesField = value;
                    this.RaisePropertyChanged("AzureQueues");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestApp.TrollBridgeService.ShareAccessToken[] AzureStorage
        {
            get
            {
                return this.AzureStorageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AzureStorageField, value) != true))
                {
                    this.AzureStorageField = value;
                    this.RaisePropertyChanged("AzureStorage");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EarliestTokenExpires
        {
            get
            {
                return this.EarliestTokenExpiresField;
            }
            set
            {
                if ((this.EarliestTokenExpiresField.Equals(value) != true))
                {
                    this.EarliestTokenExpiresField = value;
                    this.RaisePropertyChanged("EarliestTokenExpires");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "ShareAccessToken", Namespace = "http://schemas.datacontract.org/2004/07/TrollBridgeService")]
    [System.SerializableAttribute()]
    public partial class ShareAccessToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {

        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateExpiresField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SasTokenField;

        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Uri UriField;

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateExpires
        {
            get
            {
                return this.DateExpiresField;
            }
            set
            {
                if ((this.DateExpiresField.Equals(value) != true))
                {
                    this.DateExpiresField = value;
                    this.RaisePropertyChanged("DateExpires");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SasToken
        {
            get
            {
                return this.SasTokenField;
            }
            set
            {
                if ((object.ReferenceEquals(this.SasTokenField, value) != true))
                {
                    this.SasTokenField = value;
                    this.RaisePropertyChanged("SasToken");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri Uri
        {
            get
            {
                return this.UriField;
            }
            set
            {
                if ((object.ReferenceEquals(this.UriField, value) != true))
                {
                    this.UriField = value;
                    this.RaisePropertyChanged("Uri");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "TrollBridgeService.IKeyMaster")]
    public interface IKeyMaster
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IKeyMaster/GetTokensForMeIoT", ReplyAction = "http://tempuri.org/IKeyMaster/GetTokensForMeIoTResponse")]
        TestApp.TrollBridgeService.TokenHolder GetTokensForMeIoT(string deviceIdentification);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IKeyMaster/GetTokensForMeIoT", ReplyAction = "http://tempuri.org/IKeyMaster/GetTokensForMeIoTResponse")]
        System.Threading.Tasks.Task<TestApp.TrollBridgeService.TokenHolder> GetTokensForMeIoTAsync(string deviceIdentification);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IKeyMaster/GetTokensForMe", ReplyAction = "http://tempuri.org/IKeyMaster/GetTokensForMeResponse")]
        TestApp.TrollBridgeService.TokenHolder GetTokensForMe(string deviceIdentification);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IKeyMaster/GetTokensForMe", ReplyAction = "http://tempuri.org/IKeyMaster/GetTokensForMeResponse")]
        System.Threading.Tasks.Task<TestApp.TrollBridgeService.TokenHolder> GetTokensForMeAsync(string deviceIdentification);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IKeyMaster/ResetCache", ReplyAction = "http://tempuri.org/IKeyMaster/ResetCacheResponse")]
        void ResetCache(string auth);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IKeyMaster/ResetCache", ReplyAction = "http://tempuri.org/IKeyMaster/ResetCacheResponse")]
        System.Threading.Tasks.Task ResetCacheAsync(string auth);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKeyMasterChannel : TestApp.TrollBridgeService.IKeyMaster, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KeyMasterClient : System.ServiceModel.ClientBase<TestApp.TrollBridgeService.IKeyMaster>, TestApp.TrollBridgeService.IKeyMaster
    {

        public KeyMasterClient()
        {
        }

        public KeyMasterClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public KeyMasterClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public KeyMasterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public KeyMasterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public TestApp.TrollBridgeService.TokenHolder GetTokensForMeIoT(string deviceIdentification)
        {
            return base.Channel.GetTokensForMeIoT(deviceIdentification);
        }

        public System.Threading.Tasks.Task<TestApp.TrollBridgeService.TokenHolder> GetTokensForMeIoTAsync(string deviceIdentification)
        {
            return base.Channel.GetTokensForMeIoTAsync(deviceIdentification);
        }

        public TestApp.TrollBridgeService.TokenHolder GetTokensForMe(string deviceIdentification)
        {
            return base.Channel.GetTokensForMe(deviceIdentification);
        }

        public System.Threading.Tasks.Task<TestApp.TrollBridgeService.TokenHolder> GetTokensForMeAsync(string deviceIdentification)
        {
            return base.Channel.GetTokensForMeAsync(deviceIdentification);
        }

        public void ResetCache(string auth)
        {
            base.Channel.ResetCache(auth);
        }

        public System.Threading.Tasks.Task ResetCacheAsync(string auth)
        {
            return base.Channel.ResetCacheAsync(auth);
        }
    }
}
